1. to check given bracket is balanced or not
    static boolean balancedBracketsOrBot(String str) {
        Stack<Character> s1 = new Stack<>();
        for (int i = 0; i <= str.length() - 1; i++) {
            char character = str.charAt(i);
            if (character == '(' ) {
                s1.push(character);

            } else {
                if (s1.isEmpty()) {
                    return false;
                }
                if (s1.peek() == '(') {
                    s1.pop();
                }

            }
            
        }
        if (s1.size() > 0) {
            return false;
        }
        else{
            return true ; 
        }
    }



2. to delete consecutive number from the array

// EG 1,2,2,3,3,3,4,4,4,4,5 ,6,7
ANS  = 1,5,6,7


    static void deleterConsecutiveNumbers(int[] arr) {

        Stack<Integer> s1 = new Stack<>();
        for (int i = 0; i <= arr.length - 1; i++) {
            if (s1.size() == 0 || s1.peek()!=arr[i] ) {
                s1.push(arr[i]);
            }

            else if (arr[i] == s1.peek()) {
                if (i == arr.length - 1 || arr[i] != arr[i + 1]) {
                    s1.pop();
                } 
            }
        }
        int[] ans = new int[s1.size()];
        for (int i = ans.length - 1; i >=0; i--) {
            ans[i] = s1.pop();
        }
        System.out.println(Arrays.toString(ans));
        System.out.println(s1);
    }



3. top reverse a Stack

static Stack<Integer> reverse(Stack<Integer> s1, Stack<Integer> ans) {
        if (s1.empty() == true) {
            return ans;
        }
        int x = s1.pop();
        ans.push(x);
        return reverse(s1, ans);
    }



4. to find ans array for nearestSmallestToLeft

    static void nearestSmallestToLeft(int[] arr) {
        int l = arr.length;
        int[] ans = new int[l];
        int i = 0;
        Stack<Integer> s1 = new Stack<>();
        while (i <= l - 1) {
            if (s1.size() == 0) {
                ans[i] = -1;
                s1.push(i);
                i++;
            }

            else if (s1.size() > 0 && arr[s1.peek()] > arr[i]) {
                while (s1.size() > 0 && arr[s1.peek()] > arr[i]) {
                    s1.pop();
                }

                if (s1.size() == 0) {

                    ans[i] = -1;
                    s1.push(i);
                    i++;

                } else {

                    int x = s1.peek();
                    ans[i] = arr[x];
                    s1.push(i);
                    i++;

                }

            } else if (s1.size() > 0 && arr[s1.peek()] < arr[i]) {
                int x = s1.peek();
                ans[i] = arr[x];
                s1.push(i);
                i++;

            }
        }
        System.out.println(Arrays.toString(ans));
    }

    


5.  to find ans array for nearestSmallestToRight


    static void nearestSmallestToRight(int[] arr) {
        int l = arr.length;
        int[] ans = new int[l];
        int i = l - 1;
        Stack<Integer> s1 = new Stack<>();
        while (i >= 0) {
            if (s1.size() == 0) {
                ans[i] = -1;
                s1.push(i);
                i--;
            } else if (s1.size() > 0 && arr[s1.peek()] < arr[i]) {
                int x = s1.peek();
                ans[i] = arr[x];
                s1.push(i);
                i--;

            }

            else if (s1.size() > 0 && arr[s1.peek()] > arr[i]) {
                while (s1.size() > 0 && arr[s1.peek()] > arr[i]) {
                    s1.pop();
                }

                if (s1.size() == 0) {

                    ans[i] = -1;
                    s1.push(i);
                    i--;

                } else {

                    int x = s1.peek();
                    ans[i] = arr[x];
                    s1.push(i);
                    i--;

                }

            }
        }
        System.out.println(Arrays.toString(ans));
    }
     


6.to find ans array for nearestGreatestToRight

  static void nearestGreatestToRight(int[] arr) {

        int l = arr.length;
        int i = l - 1;
        Stack<Integer> s1 = new Stack<>();
        int[] ans = new int[l];
        while (i >= 0) {
            if (s1.size() == 0) {
                ans[i] = -1;
                s1.push(arr[i]);
                i--;
            } else if (s1.size() > 0 && arr[i] > s1.peek()) {
                while (s1.size() > 0 && arr[i] > s1.peek()) {
                    s1.pop();
                }
                if (s1.size() == 0) {
                    ans[i] = -1;
                    s1.push(arr[i]);
                    i--;

                } else {
                    ans[i] = s1.peek();
                    s1.push(arr[i]);
                    i--;
                }
            } else if (s1.size() > 0 && s1.peek() > arr[i]) {
                ans[i] = s1.peek();
                s1.push(arr[i]);
                i--;

            }
        }
        System.out.println(Arrays.toString(ans));
    }
 


 7. to find ans array for nearestGreatestToLeft

    static void nearestGreatestToLeft(int[] arr) {
        int l = arr.length;
        int i = 0;
        Stack<Integer> s1 = new Stack<>();
        int[] ans = new int[l];
        while (i <= l - 1) {
            if (s1.size() == 0) {
                ans[i] = -1;
                s1.push(arr[i]);
                i++;
            } else if (s1.size() > 0 && arr[i] > s1.peek()) {
                while (s1.size() > 0 && arr[i] > s1.peek()) {
                    s1.pop();
                }
                if (s1.size() == 0) {
                    ans[i] = -1;
                    s1.push(arr[i]);
                    i++;

                } else {
                    ans[i] = s1.peek();
                    s1.push(arr[i]);
                    i++;
                }
            } else if (s1.size() > 0 && s1.peek()  > arr[i]) {
                ans[i] = s1.peek();
                s1.push(arr[i]);
                i++;

            }
        }
        System.out.println(Arrays.toString(ans));
    }

  
