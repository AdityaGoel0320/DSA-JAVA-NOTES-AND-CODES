/*
// Definition for a Node.
class Node {
    int val;
    Node next;
    Node random;

    public Node(int val) {
        this.val = val;
        this.next = null;
        this.random = null;
    }
}
*/

class Solution {
    public Node copyRandomList(Node head) {
        // for making a new LL
        Node head2 = new Node(0) ;
        Node temp2 = head2 ; 

        Node temp1 = head ;
        // for deep copy 
         while(temp1!=null){
             Node newnode = new Node(temp1.val) ; 
             temp2.next = newnode ; 
             temp2 = newnode ; 
             temp1 = temp1.next ; 
         }
        //  removing extra node from new LL of value 0
         head2 = head2.next ; 
temp2 = head2 ;
temp1 = head ; 

        // alternate connection 
        Node head3 = new Node(-1) ; 
        Node temp = head3 ; 
        while(temp1!=null){
            temp1.next = temp1 ;


            
            temp1 = temp1.next ; 
            temp = temp.next ; 
            temp.next   = temp2 ; 
            temp2 = temp2.next ; 
            temp = temp.next ;  
        }
        temp1 = head ;
         temp2 = head2 ; 
        //  random pointer assigning
        while(temp1!=null && temp2!=null){
            if(temp1.random==null){
                temp2.random = null ; 
            }
            else{

            temp2.random = temp1.random.next ; 
            }
            temp1 = temp2.next ; 
            temp2 = temp1.next ; 
        } 
         temp1 = head ;
         temp2 = head2 ; 
        
        // forming next
        while(temp1!=null){
            temp1.next = temp2.next ; 
            temp1 = temp1.next ;
            temp1.next = temp1 ; 
            if(temp2.next==null){
                break ; 
            }
            temp2 = temp2.next ; 
        }

return head2 ; 
    }
}